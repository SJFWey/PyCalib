# Distinction between cameras and projectors
cams:
  camA: {id: 000F314D941E,  # id : used to identify a specific camera. May be a mac address, ip, ...
        class: pyCameras.cameraAVT.Camera, # class : Specifies the used camera implementation from pyCameras.
        settings: # settings : subset of parameters (will be set during startup).
          {exposure: 8500,  # exposure : exposure time.
           triggerMode: in} # triggerMode : Defines the trigger mode of the device. "In", "out" or "off".
           # More settings may be added (as long as they are supported by the pyCamera camera class)
        }
  # Example for a second camera (Here a dummy camera is used
  camB: {id: /path/to/your/sample/images/, # Images from this folder will be returned as "captured" images
        class: pyCameras.cameraDummy.Camera, # Camera dummy class
        settings: # same settings as seen above
          {exposure: 8500,
          triggerMode: in}
        }
projectors:
  # proA shows the implementation of a xmlrpc server projector
  proA: {constructor_args:
          {user: root, # user : Needed for the server connection.
            password: admin,  # password : Needed for the server connection.
            host: '127.0.1.1',  # host : Needed for the server connection. Standard (local): '127.0.1.1'
            port: 8001, # port : Needed for the server connection.
            },
        class: pyProjectors.projectorServer.Projector,
        settings:
          {trigger: Out,  # trigger : Defines the trigger mode of the device. "In", "out" or "off".
            color: w, # color : Defines the color of the projected images.
            exposure: 8500,  # exposure : Projection time (how long is the image visible)
            interval: 300000, # interval : Time between the start of 2 images.
            resolution: [3649, 2281], # resolution : projector resolution
            brightness: 0.25
            }
        }
  # Example projector for using a non-server projector
  proB: {constructor_args: some_kind_of_device_handle,
      class: pyProjectors.projectorLCR4500.Projector,
      settings:
        {trigger: Out,
          color: w,
          exposure: 8500,
          interval: 300000,
          resolution: [3649, 2281],
          brightness: 0.25
          }
      }
# In config all parameters are set which do not belong to the devices,
# but define a special parameter set for the measurement.
config:
  calibrationFile: null # If given a valid path, the calibration will be loaded from this path. Pass "null" for python "None" or pass empty string ''
  # The measurement entry holds all information about the used measurement class.
  # When initializing the measurement class with "initMeasurementClass" from configLoader.py, all settings will be set (as long as the class was implemented as intended)
  measurement:
    # The "class" parameter defines the measurement class.
    # This may be every class that is implemented in measurementClasses.
    # The "syntax" follows the same rules as a python import
    class: splib.measurementClasses.minImagesPhaseshift.MinImagesPhaseshift
    # The "settings" parameter defines internal parameters of the chosen measurement class.
    # The settings may differ from class to class!!!
    # See the examples below for the phaseshift measurement class.
    settings:
      direction: x  # Direction in which the patterns have to be projected
      sequence: [[1, [0, 90]], [6, [0, 90]], [36, [0, 90, 180, 270]]] # Pattern sequence in form [[frequency0, [phase0, phase1, ...]], [frequency1, [...]]]
      applyLaplacian: True  # Uses laplacian filter to remove some spikes if enabled
      # or (BOTH options may be used interchangeable => applyLaplacian with dict and vice versa)
      useLaplacian: {"enable": False, "k_size": 1, "threshold": 10, "erosion": 0}
      # "kernel_size", "kernelsize", "k_size", "ksize": Define the kernel size of the laplacian
      # "edge_threshold", "threshold": Define the threshold for the generated mask
      # "erode", "erosion", "erode_laplacian": Define number of erosions for laplacian mask
      erodeMask: 0 # Erodes the mask x times, where x is the number given in this option.
      phasemapFilter: [{"median": 7}, {"gauss": 1.2}] # Apply filtering options to phasemap, filters will be applied in order they are given!
      # Currently supported: "median", "gauss"
      # or only one filter (same for heightmap filter)
      phasemapFilter: {"median": 5}
      heightmapFilter: [{"median": 7}, {"gauss": 1.5}] # See phasemapFilter
  # The parameter "calibrationPattern" holds (only one of the following should be part of the config!)
  calibrationPattern:
    type: circles # Pattern type. Currently supported: Circlegrid, Dotgrid, Checkerboard
    gridSize: [5, 5] # Distance between two features in x and y direction
    dimension: [-20, -20, 20, 20] # Size of the calibration pattern from the origin (x_min, y_min, x_max, y_max)
  # Checkerboard example (NOT TESTED!!!)
  calibrationPattern:
    type: checkerboard
    gridSize: [5, 5]
    dimension: [7, 5] # For checkerboards the dimension has the defines with two parameters
  # Dot pattern example (does not use ring features to define the origin)
  calibrationPattern:
    type: dotgrid
    gridSize: [5, 5]
    dimension: [-20, -20, 20, 20]
  # The "calibration" entry defines all parameters which are used for calibrating the system.
  # When initializing the calibration class with "initCalibrationClass" from configLoader.py, all settings will be set (as long as the class was implemented as intended)
  calibration:
    # Class definition, follows the same rules as measurement class (see above)
    class: splib.calibration.calibrationClass.FringeProjectionSystemCalibrator
    settings:
      # Defines some calibration flags. Supported flags are listed below. These flags are the same flags and names which are used by openCV
      camFlags: [CALIB_FIX_INTRINSIC, CALIB_FIX_PRINCIPAL_POINT, CALIB_SAME_FOCAL_LENGTH]
      proFlags: [CALIB_ZERO_TANGENT_DIST, CALIB_FIX_K1, CALIB_FIX_K2]
      # Supported flags:
      # CALIB_FIX_INTRINSIC
      # CALIB_FIX_PRINCIPAL_POINT
      # CALIB_SAME_FOCAL_LENGTH
      # CALIB_ZERO_TANGENT_DIST
      # CALIB_FIX_K1
      # CALIB_FIX_K2


